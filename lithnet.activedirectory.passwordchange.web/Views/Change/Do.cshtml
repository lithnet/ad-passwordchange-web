@{
    ViewBag.Title = PasswordChangeConfigSection.Configuration.Branding.Header;
}

@model Lithnet.ActiveDirectory.PasswordChange.Web.Models.PasswordChangeRequestModel

@section Instructions {
    @if (File.Exists(Server.MapPath("~/App_Data/Templates/instructions.html")))
    {
        <section class="instructions" aria-label="password instructions">
            <h5 class="instructions-header">@Resources.Do.HeadingInstructions</h5>
            <div class="instructions-content">

                @Html.Raw(File.ReadAllText(Server.MapPath("~/App_Data/Templates/instructions.html")))

            </div>
        </section>
    }
}

@section FurtherNotes {
    @if (File.Exists(Server.MapPath("~/App_Data/Templates/notes.html")))
    {
        <section class="notes" aria-label="further notes">
            <h5 class="notes-header">@Resources.Do.HeadingNotes</h5>
            <div class="notes-content">
                @Html.Raw(File.ReadAllText(Server.MapPath("~/App_Data/Templates/notes.html")))
            </div>
        </section>
    }
}

@{
    Dictionary<string, object> usernameProps = new Dictionary<string, object>
{
{"class", "form-control"},
{"placeholder", ConfigurationManager.AppSettings["username-only"] == "true" ? Resources.Do.UserName : Resources.Do.UserNameOrEmail},
{"id", "user-name"},
{"aria_label", ConfigurationManager.AppSettings["username-only"] == "true" ? Resources.Do.UserName : Resources.Do.UserNameOrEmail},
{"required", true},
};

    Dictionary<string, object> currPasswordProps = new Dictionary<string, object>
{
{ "class", "form-control" },
{ "placeholder", Resources.Do.CurrentPassword },
{ "id", "current-password" },
{ "aria_label", Resources.Do.CurrentPassword },
{ "required", true }
};

    Dictionary<string, object> newPasswordProps = new Dictionary<string, object>
{
{"class", "form-control"},
{"placeholder", Resources.Do.NewPassword},
{"id", "new-password-input"},
{"aria_label", Resources.Do.NewPassword},
{"required", true}
};

    Dictionary<string, object> confimNewPasswordProps = new Dictionary<string, object>
{
{"class", "form-control"},
{"placeholder", Resources.Do.ConfirmNewPassword},
{"id", "confirm-new-password-input"},
{"aria_label", Resources.Do.ConfirmNewPassword},
{"required", true}
};

    // Username

    bool usernameError = ViewData.ModelState[nameof(Model.UserName)] != null && ViewData.ModelState[nameof(Model.UserName)].Errors.Any();

    if (usernameError)
    {
        usernameProps.AddOrReplace("aria_invalid", true);
        usernameProps.AddOrReplace("aria_describedby", "usernameErrorDescription");
        usernameProps.AddOrReplace("autofocus", true);
    }

    if (string.IsNullOrEmpty(Model?.UserName))
    {
        usernameProps.AddOrReplace("autofocus", true);
    }

    // Current password

    bool currPasswordError = ViewData.ModelState[nameof(Model.CurrentPassword)] != null && ViewData.ModelState[nameof(Model.CurrentPassword)].Errors.Any();

    if (currPasswordError)
    {
        currPasswordProps.AddOrReplace("aria_invalid", true);
        currPasswordProps.AddOrReplace("aria_describedby", "currentPasswordErrorDescription");

        currPasswordProps.AddOrReplace("autofocus", true);
    }

    if (!string.IsNullOrEmpty(Model?.UserName) && !string.IsNullOrEmpty(Model?.CurrentPassword))
    {
        currPasswordProps.AddOrReplace("value", Model.CurrentPassword);
    }
    else if (string.IsNullOrEmpty(Model?.CurrentPassword))
    {
        currPasswordProps.AddOrReplace("autofocus", true);
    }

    // New password

    bool newPasswordError = ViewData.ModelState[nameof(Model.NewPassword)] != null && ViewData.ModelState[nameof(Model.NewPassword)].Errors.Any();

    if (newPasswordError)
    {
        newPasswordProps.AddOrReplace("aria_describedby", "newPasswordErrorDescription");
        newPasswordProps.AddOrReplace("aria_invalid", true);
        newPasswordProps.AddOrReplace("autofocus", true);
    }

    // Confirm new password

    bool confirmPasswordError = ViewData.ModelState[nameof(Model.ConfirmNewPassword)] != null && ViewData.ModelState[nameof(Model.ConfirmNewPassword)].Errors.Any();

    if (confirmPasswordError)
    {
        confimNewPasswordProps.AddOrReplace("aria_invalid", true);
        confimNewPasswordProps.AddOrReplace("aria_describedby", "confirmNewPasswordErrorDescription");
        newPasswordProps.AddOrReplace("autofocus", true);
    }
}

@using (Html.BeginForm("Do", "Change", FormMethod.Post))
{
    <h5>@Resources.Do.CurrentDetails</h5>
    <div class="form-section" area-label="password change form">
        <div class="form-row">
            <div class="form-group col-md-6 mr-auto ml-auto">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-user"></i></span>
                    </div>

                    @Html.TextBoxFor(model => model.UserName, usernameProps)
                </div>
                @if (usernameError)
                {
                    <div class="alert alert-danger field-alert" role="alert">
                        <i class="fa fa-exclamation-circle"></i> @Html.ValidationMessageFor(model => model.UserName, null, new { @id = "usernameErrorDescription" })
                    </div>
                }
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6 mr-auto ml-auto">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-lock"></i></span>
                    </div>

                    @Html.PasswordFor(model => model.CurrentPassword, currPasswordProps)
                </div>

                @if (currPasswordError)
                {
                    <div class="alert alert-danger field-alert" role="alert">
                        <i class="fa fa-exclamation-circle"></i> @Html.ValidationMessageFor(model => model.CurrentPassword, null, new { @id = "currentPasswordErrorDescription" })
                    </div>
                }
            </div>
        </div>
    </div>
    <h5>@Resources.Do.NewDetails</h5>
    <div class="form-section">
        <div class="form-row">
            <div class="form-group col-md-6 mr-auto ml-auto">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-chevron-right"></i></span>
                    </div>
                    @Html.PasswordFor(model => model.NewPassword, newPasswordProps)
                </div>

                @if (newPasswordError)
                {
                    <div class="alert alert-danger field-alert" role="alert">
                        <i class="fa fa-exclamation-circle"></i> @Html.ValidationMessageFor(model => model.NewPassword, null, new { @id = "newPassowrdErrorDescription" })
                    </div>
                }
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6 mr-auto ml-auto">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-chevron-right"></i></span>
                    </div>

                    @Html.PasswordFor(model => model.ConfirmNewPassword, confimNewPasswordProps)
                </div>

                @if (confirmPasswordError)
                {
                    <div class="alert alert-danger field-alert" role="alert">
                        <i class="fa fa-exclamation-circle"></i> @Html.ValidationMessageFor(model => model.ConfirmNewPassword, null, new { @id = "confirmNewPasswordErrorDescription" })
                    </div>
                }
            </div>

            @if (Model?.Redirect != null)
            {
                @Html.HiddenFor(model => model.Redirect)
            }
        </div>
    </div>

    <footer>
        <div id="action-buttons">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-primary">@Resources.Do.ButtonRequestChange</button>

            @{
                CustomLinkElement helpLink = PasswordChangeConfigSection.Configuration.CustomLinks.GetHelpLink;
            }

            @if (helpLink != null)
            {
                <a href="@helpLink.LinkUrl" class="btn btn-outline-primary">@helpLink.LinkText</a>
            }
        </div>
    </footer>
}

@section scripts {
    <script src="~/Scripts/do.js"></script>
}