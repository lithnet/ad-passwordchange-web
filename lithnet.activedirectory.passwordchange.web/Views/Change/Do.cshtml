@{
    ViewBag.Title = "Password Change Page";
}

@model lithnet.activedirectory.passwordchange.web.Models.PasswordChangeRequestModel

@section Instructions {
    @if (File.Exists(Server.MapPath("~/App_Data/Templates/instructions.html")))
    {
        <section class="instructions" aria-label="password instructions">
            <h5 class="instructions-header">@Resources.Do.HeadingInstructions</h5>
            <div class="instructions-content">

                @Html.Raw(File.ReadAllText(Server.MapPath("~/App_Data/Templates/instructions.html")))

            </div>
        </section>
    }
}

@section FurtherNotes {
    @if (File.Exists(Server.MapPath("~/App_Data/Templates/notes.html")))
    {
        <section class="notes" aria-label="further notes">
            <h5 class="notes-header">@Resources.Do.HeadingNotes</h5>
            <div class="notes-content">
                @Html.Raw(File.ReadAllText(Server.MapPath("~/App_Data/Templates/notes.html")))
            </div>
        </section>
    }
}

@using (Html.BeginForm("Do", "Change", FormMethod.Post))
{
    <h5>@Resources.Do.CurrentDetails</h5>
    <div class="form-section" area-label="password change form">
        <div class="form-row">
            <div class="form-group col-md-6 mr-auto ml-auto">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                    </div>
                    @{
                        var usernameError = false;
                        var usernameProps = new Dictionary<string, object>
                        {
                            { "class", "form-control" },
                            { "placeholder", Resources.UIMessages.UserName },
                            { "id", "user-name" },
                            { "aria_label", Resources.UIMessages.UserName },
                            { "required", true }
                        };

                        if (ViewData.ModelState[nameof(Model.UserName)] != null && ViewData.ModelState[nameof(Model.UserName)].Errors.Any())
                        {
                            usernameError = true;
                            usernameProps.Add("aria_invalid", true);
                            usernameProps.Add("aria_describedBy", "usernameValidationText");
                        }

                        if (String.IsNullOrEmpty(Model?.UserName))
                        {
                            usernameProps.Add("autofocus", true);
                        }


                    }
                    @Html.TextBoxFor(model => model.UserName, usernameProps)
                </div>
                @if (usernameError)
                {
                    <div class="alert alert-danger field-alert" role="alert">
                        <i class="fas fa-exclamation-circle"></i> @Html.ValidationMessageFor(model => model.UserName, null, new { @id = "usernameValidationText" })
                    </div>
                }
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6 mr-auto ml-auto">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                    </div>
                    @{
                        var currPasswordError = false;
                        var currPasswordProps = new Dictionary<string, object>
                                {
                                    { "class", "form-control" },
                                    { "placeholder", Resources.UIMessages.CurrentPassword },
                                    { "id", "current-password" },
                                    { "aria_label", Resources.UIMessages.CurrentPassword },
                                    { "required", true }
                                };

                        if (ViewData.ModelState[nameof(Model.CurrentPassword)] != null && ViewData.ModelState[nameof(Model.CurrentPassword)].Errors.Any())
                        {
                            currPasswordError = true;
                            currPasswordProps.Add("aria_invalid", true);
                            currPasswordProps.Add("aria_describedBy", "currPasswordValidationText");
                        }

                        if (!String.IsNullOrEmpty(Model?.CurrentPassword))
                        {
                            currPasswordProps.Add("autofocus", true);
                        }


                    }
                    @Html.PasswordFor(model => model.CurrentPassword, currPasswordProps)
                </div>
                @if (currPasswordError)
                {
                    <div class="alert alert-danger field-alert" role="alert">
                        <i class="fas fa-exclamation-circle"></i> @Html.ValidationMessageFor(model => model.CurrentPassword, null, new { @id = "currPasswordValidationText" })
                    </div>
                }
            </div>
        </div>
    </div>
    <h5>@Resources.Do.NewDetails</h5>
    <div class="form-section">
        <div class="form-row">
            <div class="form-group col-md-6 mr-auto ml-auto">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-greater-than"></i></span>
                    </div>
                    @if (ViewData.ModelState[nameof(Model.NewPassword)] != null && ViewData.ModelState[nameof(Model.NewPassword)].Errors.Any())
                    {
                        @Html.PasswordFor(model => model.NewPassword, new { @class = "form-control", @placeholder = Resources.UIMessages.NewPassword, @id = "new-password-input", @aria_label = Resources.UIMessages.NewPassword, @aria_invalid = true, @aria_describedBy = "newPasswordValidationText" })
                    }
                    else
                    {
                        @Html.PasswordFor(model => model.NewPassword, new { @class = "form-control", @placeholder = Resources.UIMessages.NewPassword, @id = "new-password-input", @aria_label = Resources.UIMessages.NewPassword })
                    }

                </div>
                @if (ViewData.ModelState[nameof(Model.NewPassword)] != null && ViewData.ModelState[nameof(Model.NewPassword)].Errors.Any())
                {
                    <div class="alert alert-danger field-alert" role="alert">
                        <i class="fas fa-exclamation-circle"></i> @Html.ValidationMessageFor(model => model.NewPassword, null, new { @id = "newPasswordValidationText" })
                    </div>
                }
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6 mr-auto ml-auto">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-greater-than"></i></span>
                    </div>
                    @if (ViewData.ModelState[nameof(Model.ConfirmNewPassword)] != null && ViewData.ModelState[nameof(Model.ConfirmNewPassword)].Errors.Any())
                    {
                        @Html.PasswordFor(model => model.ConfirmNewPassword, new { @class = "form-control", @placeholder = Resources.UIMessages.ConfirmNewPassword, @aria_label = Resources.UIMessages.ConfirmNewPassword, @aria_invalid = true, @aria_describedBy = "confirmPasswordValidationText" })
                    }
                    else
                    {
                        @Html.PasswordFor(model => model.ConfirmNewPassword, new { @class = "form-control", @placeholder = Resources.UIMessages.ConfirmNewPassword, @aria_label = Resources.UIMessages.ConfirmNewPassword })
                    }

                </div>
                @if (ViewData.ModelState[nameof(Model.ConfirmNewPassword)] != null && ViewData.ModelState[nameof(Model.ConfirmNewPassword)].Errors.Any())
                {
                    <div class="alert alert-danger field-alert" role="alert">
                        <i class="fas fa-exclamation-circle"></i> @Html.ValidationMessageFor(model => model.ConfirmNewPassword, null, new { @id = "confirmPasswordValidationText" })
                    </div>
                }
            </div>
        </div>
        <div class="pwstrength_meter">
            <label id="password-test-info"></label>
        </div>
        @if (Model?.FailureReason != null)
        {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-circle"></i> @Html.DisplayTextFor(model => model.FailureReason)
        </div>
        }
        @if (Model?.Redirect != null)
        {
            @Html.HiddenFor(model => model.Redirect)
        }
    </div>

    <footer>
        <div id="action-buttons">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-primary">@Resources.Do.ButtonRequestChange</button>
            <a href="#" class="btn btn-success">@Resources.Do.ButtonHelpDesk</a>
        </div>
    </footer>
}

